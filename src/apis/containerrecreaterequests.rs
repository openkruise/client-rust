// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f -
// kopium version: 0.15.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "apps.kruise.io", version = "v1alpha1", kind = "ContainerRecreateRequest", plural = "containerrecreaterequests")]
#[kube(namespaced)]
#[kube(status = "ContainerRecreateRequestStatus")]
#[kube(schema = "disabled")]
pub struct ContainerRecreateRequestSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDeadlineSeconds")]
    pub active_deadline_seconds: Option<i64>,
    pub containers: Vec<ContainerRecreateRequestContainers>,
    #[serde(rename = "podName")]
    pub pod_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<ContainerRecreateRequestStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttlSecondsAfterFinished")]
    pub ttl_seconds_after_finished: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestContainers {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<ContainerRecreateRequestContainersPorts>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStop")]
    pub pre_stop: Option<ContainerRecreateRequestContainersPreStop>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusContext")]
    pub status_context: Option<ContainerRecreateRequestContainersStatusContext>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestContainersPorts {
    #[serde(rename = "containerPort")]
    pub container_port: i32,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostIP")]
    pub host_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPort")]
    pub host_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestContainersPreStop {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<ContainerRecreateRequestContainersPreStopExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<ContainerRecreateRequestContainersPreStopHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<ContainerRecreateRequestContainersPreStopTcpSocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestContainersPreStopExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestContainersPreStopHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<ContainerRecreateRequestContainersPreStopHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestContainersPreStopHttpGetHttpHeaders {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestContainersPreStopTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestContainersStatusContext {
    #[serde(rename = "containerID")]
    pub container_id: String,
    #[serde(rename = "restartCount")]
    pub restart_count: i32,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failurePolicy")]
    pub failure_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minStartedSeconds")]
    pub min_started_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderedRecreate")]
    pub ordered_recreate: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unreadyGracePeriodSeconds")]
    pub unready_grace_period_seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "completionTime")]
    pub completion_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerRecreateStates")]
    pub container_recreate_states: Option<Vec<ContainerRecreateRequestStatusContainerRecreateStates>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    pub phase: String,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ContainerRecreateRequestStatusContainerRecreateStates {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    pub name: String,
    pub phase: String,
}

