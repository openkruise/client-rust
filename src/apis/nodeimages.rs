// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f -
// kopium version: 0.15.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "apps.kruise.io", version = "v1alpha1", kind = "NodeImage", plural = "nodeimages")]
#[kube(status = "NodeImageStatus")]
#[kube(schema = "disabled")]
pub struct NodeImageSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<BTreeMap<String, NodeImageImages>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct NodeImageImages {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullSecrets")]
    pub pull_secrets: Option<Vec<NodeImageImagesPullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<NodeImageImagesTags>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct NodeImageImagesPullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct NodeImageImagesTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    pub created_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerReferences")]
    pub owner_references: Option<Vec<NodeImageImagesTagsOwnerReferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<NodeImageImagesTagsPullPolicy>,
    pub tag: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct NodeImageImagesTagsOwnerReferences {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct NodeImageImagesTagsPullPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDeadlineSeconds")]
    pub active_deadline_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backoffLimit")]
    pub backoff_limit: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttlSecondsAfterFinished")]
    pub ttl_seconds_after_finished: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct NodeImageStatus {
    pub desired: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub failed: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstSyncStatus")]
    pub first_sync_status: Option<NodeImageStatusFirstSyncStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageStatuses")]
    pub image_statuses: Option<BTreeMap<String, NodeImageStatusImageStatuses>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pulling: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub succeeded: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct NodeImageStatusFirstSyncStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncAt")]
    pub sync_at: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct NodeImageStatusImageStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<NodeImageStatusImageStatusesTags>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct NodeImageStatusImageStatusesTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "completionTime")]
    pub completion_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageID")]
    pub image_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    pub phase: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub progress: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    pub tag: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

