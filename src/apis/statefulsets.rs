// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f -
// kopium version: 0.15.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use std::collections::HashMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "apps.kruise.io", version = "v1beta1", kind = "StatefulSet", plural = "statefulsets")]
#[kube(namespaced)]
#[kube(status = "StatefulSetStatus")]
#[kube(schema = "disabled")]
pub struct StatefulSetSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<StatefulSetLifecycle>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podManagementPolicy")]
    pub pod_management_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reserveOrdinals")]
    pub reserve_ordinals: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleStrategy")]
    pub scale_strategy: Option<StatefulSetScaleStrategy>,
    pub selector: StatefulSetSelector,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    pub template: HashMap<String, serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStrategy")]
    pub update_strategy: Option<StatefulSetUpdateStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplates")]
    pub volume_claim_templates: Option<HashMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetLifecycle {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inPlaceUpdate")]
    pub in_place_update: Option<StatefulSetLifecycleInPlaceUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preDelete")]
    pub pre_delete: Option<StatefulSetLifecyclePreDelete>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetLifecycleInPlaceUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalizersHandler")]
    pub finalizers_handler: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelsHandler")]
    pub labels_handler: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetLifecyclePreDelete {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalizersHandler")]
    pub finalizers_handler: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelsHandler")]
    pub labels_handler: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetScaleStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<StatefulSetSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetUpdateStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<StatefulSetUpdateStrategyRollingUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetUpdateStrategyRollingUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inPlaceUpdateStrategy")]
    pub in_place_update_strategy: Option<StatefulSetUpdateStrategyRollingUpdateInPlaceUpdateStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReadySeconds")]
    pub min_ready_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podUpdatePolicy")]
    pub pod_update_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unorderedUpdate")]
    pub unordered_update: Option<StatefulSetUpdateStrategyRollingUpdateUnorderedUpdate>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetUpdateStrategyRollingUpdateInPlaceUpdateStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gracePeriodSeconds")]
    pub grace_period_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetUpdateStrategyRollingUpdateUnorderedUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityStrategy")]
    pub priority_strategy: Option<StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategy>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderPriority")]
    pub order_priority: Option<Vec<StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyOrderPriority>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weightPriority")]
    pub weight_priority: Option<Vec<StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriority>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyOrderPriority {
    #[serde(rename = "orderedKey")]
    pub ordered_key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriority {
    #[serde(rename = "matchSelector")]
    pub match_selector: StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelector,
    pub weight: i32,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetStatus {
    #[serde(rename = "availableReplicas")]
    pub available_replicas: i32,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collisionCount")]
    pub collision_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<StatefulSetStatusConditions>>,
    #[serde(rename = "currentReplicas")]
    pub current_replicas: i32,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentRevision")]
    pub current_revision: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    #[serde(rename = "readyReplicas")]
    pub ready_replicas: i32,
    pub replicas: i32,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateRevision")]
    pub update_revision: Option<String>,
    #[serde(rename = "updatedReplicas")]
    pub updated_replicas: i32,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct StatefulSetStatusConditions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    pub status: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

