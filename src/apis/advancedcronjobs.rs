// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f -
// kopium version: 0.15.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::HashMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "apps.kruise.io", version = "v1alpha1", kind = "AdvancedCronJob", plural = "advancedcronjobs")]
#[kube(namespaced)]
#[kube(status = "AdvancedCronJobStatus")]
#[kube(schema = "disabled")]
pub struct AdvancedCronJobSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyPolicy")]
    pub concurrency_policy: Option<AdvancedCronJobConcurrencyPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failedJobsHistoryLimit")]
    pub failed_jobs_history_limit: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    pub schedule: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startingDeadlineSeconds")]
    pub starting_deadline_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successfulJobsHistoryLimit")]
    pub successful_jobs_history_limit: Option<i32>,
    pub template: AdvancedCronJobTemplate,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum AdvancedCronJobConcurrencyPolicy {
    Allow,
    Forbid,
    Replace,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct AdvancedCronJobTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "broadcastJobTemplate")]
    pub broadcast_job_template: Option<AdvancedCronJobTemplateBroadcastJobTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobTemplate")]
    pub job_template: Option<HashMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct AdvancedCronJobTemplateBroadcastJobTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<AdvancedCronJobTemplateBroadcastJobTemplateMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<AdvancedCronJobTemplateBroadcastJobTemplateSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct AdvancedCronJobTemplateBroadcastJobTemplateMetadata {
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct AdvancedCronJobTemplateBroadcastJobTemplateSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "completionPolicy")]
    pub completion_policy: Option<AdvancedCronJobTemplateBroadcastJobTemplateSpecCompletionPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failurePolicy")]
    pub failure_policy: Option<AdvancedCronJobTemplateBroadcastJobTemplateSpecFailurePolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallelism: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    pub template: HashMap<String, serde_json::Value>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct AdvancedCronJobTemplateBroadcastJobTemplateSpecCompletionPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDeadlineSeconds")]
    pub active_deadline_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttlSecondsAfterFinished")]
    pub ttl_seconds_after_finished: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct AdvancedCronJobTemplateBroadcastJobTemplateSpecFailurePolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartLimit")]
    pub restart_limit: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct AdvancedCronJobStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<Vec<AdvancedCronJobStatusActive>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastScheduleTime")]
    pub last_schedule_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct AdvancedCronJobStatusActive {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

