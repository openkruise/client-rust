// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f -
// kopium version: 0.15.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "apps.kruise.io", version = "v1alpha1", kind = "ResourceDistribution", plural = "resourcedistributions")]
#[kube(status = "ResourceDistributionStatus")]
#[kube(schema = "disabled")]
pub struct ResourceDistributionSpec {
    pub resource: BTreeMap<String, serde_json::Value>,
    pub targets: ResourceDistributionTargets,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ResourceDistributionTargets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allNamespaces")]
    pub all_namespaces: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedNamespaces")]
    pub excluded_namespaces: Option<ResourceDistributionTargetsExcludedNamespaces>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includedNamespaces")]
    pub included_namespaces: Option<ResourceDistributionTargetsIncludedNamespaces>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceLabelSelector")]
    pub namespace_label_selector: Option<ResourceDistributionTargetsNamespaceLabelSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ResourceDistributionTargetsExcludedNamespaces {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub list: Option<Vec<ResourceDistributionTargetsExcludedNamespacesList>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ResourceDistributionTargetsExcludedNamespacesList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ResourceDistributionTargetsIncludedNamespaces {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub list: Option<Vec<ResourceDistributionTargetsIncludedNamespacesList>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ResourceDistributionTargetsIncludedNamespacesList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ResourceDistributionTargetsNamespaceLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ResourceDistributionTargetsNamespaceLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ResourceDistributionTargetsNamespaceLabelSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ResourceDistributionStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ResourceDistributionStatusConditions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desired: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub failed: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub succeeded: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct ResourceDistributionStatusConditions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failedNamespace")]
    pub failed_namespace: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    pub status: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

