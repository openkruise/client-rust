// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -Af -
// kopium version: 0.15.0

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Serialize, Deserialize};
use std::collections::HashMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

/// BroadcastJobSpec defines the desired state of BroadcastJob
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "apps.kruise.io", version = "v1alpha1", kind = "BroadcastJob", plural = "broadcastjobs")]
#[kube(namespaced)]
#[kube(status = "BroadcastJobStatus")]
pub struct BroadcastJobSpec {
    /// CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "completionPolicy")]
    pub completion_policy: Option<BroadcastJobCompletionPolicy>,
    /// FailurePolicy indicates the behavior of the job, when failed pod is found.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failurePolicy")]
    pub failure_policy: Option<BroadcastJobFailurePolicy>,
    /// Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when the work left to do is less than max parallelism. Not setting this value means no limit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallelism: Option<IntOrString>,
    /// Paused will pause the job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    /// Template describes the pod that will be created when executing a job.
    pub template: HashMap<String, serde_json::Value>,
}

/// CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BroadcastJobCompletionPolicy {
    /// ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDeadlineSeconds")]
    pub active_deadline_seconds: Option<i64>,
    /// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature. Only works for Always type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ttlSecondsAfterFinished")]
    pub ttl_seconds_after_finished: Option<i32>,
    /// Type indicates the type of the CompletionPolicy. Default is Always.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// FailurePolicy indicates the behavior of the job, when failed pod is found.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BroadcastJobFailurePolicy {
    /// RestartLimit specifies the number of retries before marking the pod failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartLimit")]
    pub restart_limit: Option<i32>,
    /// Type indicates the type of FailurePolicyType. Default is FailurePolicyTypeFailFast.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// BroadcastJobStatus defines the observed state of BroadcastJob
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BroadcastJobStatus {
    /// The number of actively running pods.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<i32>,
    /// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "completionTime")]
    pub completion_time: Option<String>,
    /// The latest available observations of an object's current state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<BroadcastJobStatusConditions>>,
    /// The desired number of pods, this is typically equal to the number of nodes satisfied to run pods.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desired: Option<i32>,
    /// The number of pods which reached phase Failed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub failed: Option<i32>,
    /// The phase of the job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// The number of pods which reached phase Succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub succeeded: Option<i32>,
}

/// JobCondition describes current state of a job.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BroadcastJobStatusConditions {
    /// Last time the condition was checked.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastProbeTime")]
    pub last_probe_time: Option<String>,
    /// Last time the condition transit from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// Human readable message indicating details about last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// (brief) reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    pub status: String,
    /// Type of job condition, Complete or Failed.
    #[serde(rename = "type")]
    pub r#type: String,
}

